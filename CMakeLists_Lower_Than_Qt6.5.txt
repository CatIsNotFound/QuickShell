icmake_minimum_required(VERSION 3.5)

project(QuickShell_stableVersion VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)
find_package(Qt6 REQUIRED COMPONENTS LinguistTools)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(QuickShell_stableVersion
        MANUAL_FINALIZATION
        GUI/aboutapp.cpp GUI/aboutapp.h GUI/aboutapp.ui GUI/findterminal.cpp GUI/findterminal.h GUI/findterminal.ui GUI/mainwindow.cpp GUI/mainwindow.h GUI/mainwindow.ui GUI/preference.cpp GUI/preference.h GUI/preference.ui Libs/scriptscollection.cpp Libs/scriptscollection.h Libs/settings.cpp Libs/settings.h Libs/termslist.cpp Libs/termslist.h Libs/Version.h assets.qrc main.cpp
        i18n/QuickShell_zh_CN.qm i18n/QuickShell_zh_HK.qm i18n/QuickShell_zh_TW.qm
    )

qt_add_translations(QuickShell_stableVersion TS_FILES i18n/QuickShell_en_US.ts i18n/QuickShell_zh_CN.ts i18n/QuickShell_zh_HK.ts i18n/QuickShell_zh_TW.ts)
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET QuickShell_stableVersion APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(QuickShell_stableVersion SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(QuickShell_stableVersion
            ${PROJECT_SOURCES}
        )
    endif()
endif()

target_link_libraries(QuickShell_stableVersion PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)

# Misc
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/assets/scripts $<TARGET_FILE_DIR:${PROJECT_NAME}>/scripts
)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/assets/themes $<TARGET_FILE_DIR:${PROJECT_NAME}>/themes
)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/assets/conf $<TARGET_FILE_DIR:${PROJECT_NAME}>/conf
)



# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.QuickShell_stableVersion)
endif()
set_target_properties(QuickShell_stableVersion PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS QuickShell_stableVersion
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(QuickShell_stableVersion)
endif()
